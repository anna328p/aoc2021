#!/usr/bin/env ruby

# frozen_string_literal: true

require 'thor'
require 'rest_client'

def pad(day)
  day.to_s.rjust(2, '0')
end

def folder_path(day)
  File.join(__dir__, '..', 'days', pad(day))
end

##
# Advent of Code API
module AoCAPI
  @endpoints = {
    input: 'https://adventofcode.com/%s/day/%s/input',
    answer: 'https://adventofcode.com/%s/day/%s/answer'
  }.freeze

  def self.uri(endpoint, *args)
    format(@endpoints[endpoint], *args)
  end

  def self.get(token, endpoint, *args)
    get_uri = uri(endpoint, *args)

    RestClient.get(get_uri, 'Cookie' => "session=#{token}")
  end

  def self.post(token, endpoint, *args, body: nil)
    post_uri = uri(endpoint, *args)

    RestClient.post(post_uri, body, 'Cookie' => "session=#{token}")
  end

  def self.input(token, year, day)
    get(token, :input, year, day)
  end
end

##
# Advent of Code CLI
class AoCCLI < Thor
  package_name 'Advent of Code CLI'

  class_option :year, required: false, type: :numeric, aliases: ['-y']

  no_commands do
    def ensure_token
      @token ||= ENV['AOC_SESSION']
      raise 'AoC session token not found' unless @token
    end
  end

  desc 'get [DAY]', 'Get input for a day'
  def get(day = nil)
    ensure_token
    @year = options[:year] || Date.today.year
    day ||= Date.today.day

    input = AoCAPI.input(@token, @year, day)
    File.write(File.join(folder_path(day), 'input.txt'), input)
  end
end

AoCCLI.start(ARGV)

# vim: ft=ruby
